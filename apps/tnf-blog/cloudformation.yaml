AWSTemplateFormatVersion: 2010-09-09

Parameters:
  paramACMCertificateArn:
    Description: Public SSL/TLS certificate ARN published by AWS Certificate Manager (ACM)
    Type: String

  paramRootDomain:
    Description: Specify a root domain for your website (such as example.com)
    Type: String

  paramSubdomain:
    Description: OPTIONAL. Specify a subdomain (such as 'www' or 'apex' for www.example.com or apex.example.com). You can leave it empty to skip.
    Type: String
    Default: www

  paramUniqueTagName:
    Description: Specify a unique name for tag
    Type: String
    Default: static-website-hosting-to-s3
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Must contain only ASCII characters


Resources:
  cloudFrontOAI:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        # a comment to describe the origin access identity
        Comment: 'OAI for S3 origins'

  s3BucketForSubdomain:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete # keep S3 bucket when its stack is deleted
    Properties:
      BucketName: blog.thenoughtyfox.com # use the name of subdomain with domain, such as www.example.com
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
      VersioningConfiguration: # turn versioning on in case we need to rollback newly built files to older version
        Status: Enabled
      AccessControl: BucketOwnerFullControl

  RedirectBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'www.blog.thenoughtyfox.com'
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: 'blog.thenoughtyfox.com'
          Protocol: 'https'


  cloudFrontDistributionForSubdomain:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: CloudFront distribution for blog.example.com
        Origins:
          - DomainName: !Sub '${paramSubdomain}.${paramRootDomain}.s3-website-${AWS::Region}.amazonaws.com' # S3 website endpoint for subdomain
            Id: !Sub 'BlogS3Origin-${paramSubdomain}.${paramRootDomain}' # Unique identifier for the subdomain S3 origin
            CustomOriginConfig: # Since it's a website endpoint, use CustomOriginConfig
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: 'http-only' # Use HTTP to access S3 website endpoint
        Aliases:
          - !Sub '${paramSubdomain}.${paramRootDomain}' # Use blog.example.com as the alias
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: 3600
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          MinTTL: 60
          MaxTTL: 86400
          TargetOriginId: !Sub 'BlogS3Origin-${paramSubdomain}.${paramRootDomain}'
          ViewerProtocolPolicy: 'redirect-to-https'
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: '/error.html'
            ErrorCachingMinTTL: 60
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref paramACMCertificateArn
          SslSupportMethod: sni-only
        DefaultRootObject: 'index.html'
      Tags:
        - Key: tnf-blog-cloudformation
          Value: !Ref paramUniqueTagName

  RedirectBlogWwwDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: 'Redirect from www.blog.thenoughtyfox.com to blog.thenoughtyfox.com'
        Origins:
          - DomainName: !Sub 'www.blog.thenoughtyfox.com.s3-website-${AWS::Region}.amazonaws.com'
            Id: 'S3-www.blog.thenoughtyfox.com'
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: 'http-only'
        Aliases:
          - 'www.blog.thenoughtyfox.com'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: 3600
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          MinTTL: 60
          MaxTTL: 86400
          TargetOriginId: 'S3-www.blog.thenoughtyfox.com'
          ViewerProtocolPolicy: 'redirect-to-https'
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_All


  policyForS3BucketForSubdomain:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref s3BucketForSubdomain
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${paramSubdomain}.${paramRootDomain}/*'
            Principal:
              CanonicalUser: !GetAtt cloudFrontOAI.S3CanonicalUserId
          # deny access for non SSL access to S3 bucket
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub 'arn:aws:s3:::${paramSubdomain}.${paramRootDomain}'
              - !Sub 'arn:aws:s3:::${paramSubdomain}.${paramRootDomain}/*'
            Condition:
              Bool:
                'aws:SecureTransport': false

  policyForS3BucketForReirect:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref RedirectBucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::www.${paramSubdomain}.${paramRootDomain}/*'
            Principal:
              CanonicalUser: !GetAtt cloudFrontOAI.S3CanonicalUserId
          # deny access for non SSL access to S3 bucket
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub 'arn:aws:s3:::www.${paramSubdomain}.${paramRootDomain}'
              - !Sub 'arn:aws:s3:::www.${paramSubdomain}.${paramRootDomain}/*'
            Condition:
              Bool:
                'aws:SecureTransport': false

  route53RecordSetForSubdomain:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Sub '${paramRootDomain}.'
      Name: !Sub '${paramSubdomain}.${paramRootDomain}.'
      Type: A
      AliasTarget:
        HostedZoneId: Z032982169MDEWMQDI8M # CloudFront hosted zone ID for alias records
        DNSName: !GetAtt cloudFrontDistributionForSubdomain.DomainName
      TTL: '300'

  route53RecordSetForWWWSubdomain:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Sub '${paramRootDomain}.'
      Name: !Sub 'www.${paramSubdomain}.${paramRootDomain}.'
      Type: A
      AliasTarget:
        HostedZoneId: Z032982169MDEWMQDI8M # CloudFront hosted zone ID for alias records
        DNSName: !GetAtt RedirectBlogWwwDistribution.DomainName
      TTL: '300'


## =================== OUTPUT =================== ##
Outputs:
  outputCloudFrontDistributionForSubdomainId:
    Description: CloudFront distribution ID for subdomain
    Value: !Ref cloudFrontDistributionForSubdomain

  outputRedirectBlogWwwDistributionId:
      Description: CloudFront distribution ID for redirect
      Value: !Ref RedirectBlogWwwDistribution

  outputS3BucketForSubdomain:
    Description: S3 bucket for subdomain
    Value: !Ref s3BucketForSubdomain

  outputRedirectBucket:
    Description: S3 bucket for redirect
    Value: !Ref RedirectBucket


